generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ORG_ADMIN
  SURVEY_CREATOR
  RESPONDENT
  VIEWER
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          Role      @default(RESPONDENT)
  organization  String?
  department    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?
  isActive      Boolean   @default(true)
  
  surveys       Survey[]  @relation("CreatedSurveys")
  responses     Response[]
  
  @@index([email])
  @@index([role])
}

model Survey {
  id            String    @id @default(cuid())
  title         String
  description   String?
  category      String    // Environmental, Social, Governance, Custom
  createdBy     User      @relation("CreatedSurveys", fields: [createdById], references: [id])
  createdById   String
  startDate     DateTime?
  endDate       DateTime?
  isActive      Boolean   @default(true)
  isPublished   Boolean   @default(false)
  allowAnonymous Boolean  @default(false)
  maxResponses  Int?      // Maximum number of responses allowed
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Selected pillars, levers, and variables for this survey
  selectedPillars   Json?  // Array of pillar IDs
  selectedLevers    Json?  // Array of lever IDs  
  selectedVariables Json?  // Array of variable IDs
  
  questions     SurveyQuestion[]
  responses     Response[]
  
  @@index([createdById])
  @@index([category])
  @@index([isActive, isPublished])
}

model SurveyQuestion {
  id            String    @id @default(cuid())
  survey        Survey    @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId      String
  
  // Reference to the original variable question
  variableQuestion    VariableQuestion @relation(fields: [variableQuestionId], references: [id])
  variableQuestionId  String
  
  // Survey-specific customizations (copy from variable question but can be modified)
  text          String
  type          String    // single_select, multi_select, text
  options       Json?     // For options with scores
  required      Boolean   @default(true)
  order         Int
  weight        Float     @default(1.0)
  
  // Question grouping (copied from variable question)
  groupId       String?
  isGroupLead   Boolean   @default(false)
  requiresEvidence Boolean @default(false)
  evidenceDescription String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  answers       Answer[]
  
  @@index([surveyId])
  @@index([variableQuestionId])
  @@unique([surveyId, order])
}

model Response {
  id            String    @id @default(cuid())
  survey        Survey    @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId      String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  completedAt   DateTime?
  score         Float?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  answers       Answer[]
  
  @@index([surveyId])
  @@index([userId])
  @@unique([surveyId, userId])
}

model Answer {
  id            String    @id @default(cuid())
  response      Response  @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId    String
  question      SurveyQuestion  @relation(fields: [questionId], references: [id])
  questionId    String
  value         String?   // The actual answer value
  evidence      String?   @db.Text // Evidence data (file or text)
  score         Float?    // Calculated score for this answer
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([responseId])
  @@index([questionId])
  @@unique([responseId, questionId])
}

model Pillar {
  id          String   @id @default(cuid())
  name        String   @unique
  weightage   Float    @default(1.0)
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  levers      Lever[]
  
  @@index([name])
  @@index([isActive])
}

model Lever {
  id          String   @id @default(cuid())
  name        String
  weightage   Float    @default(1.0)
  description String?
  isActive    Boolean  @default(true)
  pillar      Pillar   @relation(fields: [pillarId], references: [id], onDelete: Cascade)
  pillarId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  variables   Variable[]
  
  @@index([pillarId])
  @@index([name])
  @@index([isActive])
  @@unique([pillarId, name])
}

model Variable {
  id          String   @id @default(cuid())
  name        String
  weightage   Float    @default(1.0)
  description String?
  isActive    Boolean  @default(true)
  
  // Hierarchical relationship - self-referential
  parentId    String?
  parent      Variable?  @relation("VariableHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Variable[] @relation("VariableHierarchy")
  
  // Level in hierarchy (0 = root under lever, 1 = first level child, etc.)
  level       Int       @default(0)
  
  // Store the full path for efficient querying (e.g., "root/child1/child2")
  path        String?
  
  // Order among siblings
  order       Int       @default(0)
  
  // Either belongs to a lever (root variables) OR has a parent variable
  leverId     String?
  lever       Lever?    @relation(fields: [leverId], references: [id], onDelete: Cascade)
  
  // Questions can be attached at any level
  questions   VariableQuestion[]
  
  // Aggregation settings for child variables
  aggregationType String?  @default("SUM") // SUM, AVERAGE, WEIGHTED_AVERAGE, MAX, MIN
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([parentId])
  @@index([leverId])
  @@index([path])
  @@index([level])
  @@index([order])
  @@index([name])
  @@index([isActive])
}

model VariableQuestion {
  id            String    @id @default(cuid())
  text          String
  type          String    // single_select, multi_select, text
  
  // Enhanced options structure for scoring
  // Format: [{ text: string, absoluteScore: number, internalScore: number }]
  options       Json?     
  
  required      Boolean   @default(true)
  weightage     Float     @default(1.0)
  order         Int
  
  // Question grouping
  groupId       String?   // Questions with same groupId are grouped
  isGroupLead   Boolean   @default(false) // First question in a group
  
  // Evidence upload flag
  requiresEvidence Boolean @default(false)
  evidenceDescription String? // Description of what evidence is needed
  
  // Formula for calculated questions (can reference other questions)
  formula       String?   
  
  variable      Variable  @relation(fields: [variableId], references: [id], onDelete: Cascade)
  variableId    String
  
  // Relations to surveys that use this question
  surveyQuestions SurveyQuestion[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([variableId])
  @@index([type])
  @@index([groupId])
  @@unique([variableId, order])
}